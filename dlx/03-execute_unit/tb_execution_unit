library ieee;
use ieee.std_logic_1164.all;
use work.globals.all;
use work.myTypes.all;

entity tb_execution is
end tb_execution;

architecture TEST of tb_execution is

  constant NBIT : integer := 32;
  signal s_npc_in : std_logic_vector(NBIT-1 downto 0);
  signal s_a_reg_in : std_logic_vector(NBIT-1 downto 0);
  signal s_b_reg_in : std_logic_vector(NBIT-1 downto 0);
  signal s_imm_reg_in : std_logic_vector(NBIT-1 downto 0);
  signal s_mux_one_control : std_logic;
  signal s_mux_two_control : std_logic;
  signal s_alu_control : aluOp;
  signal s_clk : std_logic := '0';
  signal s_reset : std_logic := '0';
  signal s_execution_stage_out : std_logic_vector(NBIT-1 downto 0);
  signal s_b_reg_out : std_logic_vector(NBIT-1 downto 0);
  signal s_rd_reg_in : std_logic_vector(4 downto 0) := "11111";
  signal s_rd_reg_out : std_logic_vector(4 downto 0);
  signal s_alu_forwarding_one : std_logic := '0';
  signal s_mem_forwarding_one : std_logic := '0';
  signal s_alu_forwarding_two : std_logic := '0';
  signal s_mem_forwarding_two : std_logic := '0';
  signal s_alu_forwarding_value : std_logic_vector(NBIT - 1 downto 0) := (others => '0');
  signal s_mem_forwarding_value : std_logic_vector(NBIT - 1 downto 0) := (others => '0');

  component execution_unit
  generic( numbit: integer := BIT_RISC);
  port(    clk:                   in std_logic;
           reset:                 in std_logic;
           alu_forwarding_one:    in std_logic;
           mem_forwarding_one:    in std_logic;
           alu_forwarding_two:    in std_logic;
           mem_forwarding_two:    in std_logic;
           alu_forwarding_value:  in std_logic_vector(numbit - 1 downto 0);
           mem_forwarding_value:  in std_logic_vector(numbit - 1 downto 0);
           npc_in:                in std_logic_vector(numbit-1 downto 0);
           a_reg_in:              in std_logic_vector(numbit-1 downto 0);
           b_reg_in:              in std_logic_vector(numbit-1 downto 0);
           imm_reg_in:            in std_logic_vector(numbit-1 downto 0);
           rd_reg_in:             in std_logic_vector(4 downto 0);
           mux_one_control:       in std_logic;
           mux_two_control:       in std_logic;
           alu_control:           in aluOp;
           execution_stage_out:   out std_logic_vector(numbit-1 downto 0);
           b_reg_out:             out std_logic_vector(numbit-1 downto 0);
           rd_reg_out:            out std_logic_vector(4 downto 0));
  end component;

  begin

    DUT : execution_unit
    generic map(NBIT)    
	port map(s_clk, s_reset, s_alu_forwarding_one, s_mem_forwarding_one, s_alu_forwarding_two, s_mem_forwarding_two, s_alu_forwarding_value, s_mem_forwarding_value, s_npc_in, s_a_reg_in, s_b_reg_in, s_imm_reg_in, s_rd_reg_in, s_mux_one_control, s_mux_two_control, s_alu_control, s_execution_stage_out, s_b_reg_out, s_rd_reg_out);
    
    s_npc_in <= "00000000000000000000000000000001";
    s_a_reg_in <= "00000000000000000000000000000010" , "00000000000000000000000000000000" after 31 ns;
    s_b_reg_in <= "00000000000000000000000000000011", "00000000000000000000000000000000" after 31 ns;
    s_imm_reg_in <= "00000000000000000000000000000100";

    s_mux_one_control <= '0', '1' after 9 ns, '0' after 19 ns, '1' after 31 ns;
    s_mux_two_control <= '1', '0' after 5 ns, '1' after 9 ns, '0' after 15 ns, '1' after 21 ns, '0' after 25 ns;

    s_alu_control <= NOP, ADDOP after 3 ns, SUBOP after 5 ns, MULOP after 7 ns, ANDOP after 9 ns, NANDOP after 11 ns, OROP after 13 ns, NOROP after 15, XOROP after 17, XNOROP after 19, SLLOP after 21, SRLOP after 23, SRAOP after 25, GTOP after 27, GETOP after 29, LTOP after 31, LETOP after 33, EQOP after 35, NEQOP after 37, GTUOP after 39, GETUOP after 41, LTUOP after 43, LETUOP after 45, LHIOP after 47;
    
    --type aluOp is (NOP, ADDOP, SUBOP, MULOP, ANDOP, NANDOP, OROP, NOROP, XOROP, XNOROP, SLLOP, SRLOP, SRAOP, GTOP, GETOP, LTOP, LETOP, EQOP, NEQOP, GTUOP, GETUOP, LTUOP, LETUOP, LHIOP);

    s_alu_forwarding_one <= '1' after 31 ns, '0' after 35 ns;
    s_alu_forwarding_two <= '1' after 31 ns, '0' after 37 ns;
    s_mem_forwarding_one <= '1' after 31 ns;
    s_mem_forwarding_two <= '1' after 31 ns;
    s_alu_forwarding_value <= "00000000000000000000000000000100" after 31 ns;
    s_mem_forwarding_value <= "00000000000000000000000000000001" after 31 ns;

    PCLOCK : process(s_clk)
    begin
      s_clk <= not(s_clk) after 1 ns;
    end process;

end TEST;